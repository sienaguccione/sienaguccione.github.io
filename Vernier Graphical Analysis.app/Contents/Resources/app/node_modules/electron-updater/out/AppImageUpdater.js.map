{"version":3,"file":"AppImageUpdater.js","sourceRoot":"","sources":["../src/AppImageUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, DownloadOptions, AllPublishOptions, UpdateInfo } from \"builder-util-runtime\"\nimport { spawn, SpawnOptions } from \"child_process\"\nimport \"source-map-support/register\"\nimport { AppImageDifferentialDownloader } from \"./differentialDownloader/AppImageDifferentialDownloader\"\nimport { UPDATE_DOWNLOADED, UpdateCheckResult } from \"./main\"\nimport { BaseUpdater } from \"./BaseUpdater\"\nimport { readBlockMapDataFromAppImage } from \"builder-util-runtime/out/blockMapApi\"\nimport { safeLoad } from \"js-yaml\"\nimport { chmod, move } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport isDev from \"electron-is-dev\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { findFile } from \"./Provider\"\n\nexport class AppImageUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return BluebirdPromise.resolve(null)\n    }\n\n    if (process.env.APPIMAGE == null) {\n      this._logger.warn(\"APPIMAGE env is not defined, current application is not an AppImage\")\n      return BluebirdPromise.resolve(null)\n    }\n\n    return super.checkForUpdatesAndNotify()\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const fileInfo = findFile((await this.provider).resolveFiles(updateInfo), \"AppImage\")!!\n\n    const requestHeaders = await this.computeRequestHeaders()\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: requestHeaders,\n      cancellationToken,\n      sha512: fileInfo.info.sha512,\n    }\n\n    let installerPath = this.downloadedUpdateHelper.getDownloadedFile(updateInfo, fileInfo)\n    if (installerPath != null) {\n      return [installerPath]\n    }\n\n    await this.executeDownload(downloadOptions, fileInfo, async (tempDir, destinationFile) => {\n      installerPath = destinationFile\n\n      const oldFile = process.env.APPIMAGE!!\n      if (oldFile == null) {\n        throw new Error(\"APPIMAGE env is not defined\")\n      }\n\n      let isDownloadFull = false\n      try {\n        await new AppImageDifferentialDownloader(fileInfo.info, this.httpExecutor, {\n          newUrl: fileInfo.url.href,\n          oldPackageFile: oldFile,\n          logger: this._logger,\n          newFile: installerPath,\n          requestHeaders,\n        }).download(safeLoad(await readBlockMapDataFromAppImage(oldFile)))\n      }\n      catch (e) {\n        this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n        // during test (developer machine mac) we must throw error\n        isDownloadFull = process.platform === \"linux\"\n      }\n\n      if (isDownloadFull) {\n        await this.httpExecutor.download(fileInfo.url.href, installerPath, downloadOptions)\n      }\n    })\n\n    this.downloadedUpdateHelper.setDownloadedFile(installerPath!!, null, updateInfo, fileInfo)\n    this.addQuitHandler()\n    this.emit(UPDATE_DOWNLOADED, this.updateInfo)\n    return [installerPath!!]\n  }\n\n  protected doInstall(installerPath: string, isSilent: boolean, isForceRunAfter: boolean): boolean {\n    const args = [\"\"]\n    if (isForceRunAfter) {\n      args.push(\"--force-run\")\n    }\n\n    const appImageFile = process.env.APPIMAGE!!\n    if (appImageFile == null) {\n      throw new Error(\"APPIMAGE env is not defined\")\n    }\n\n    const spawnOptions: SpawnOptions = {\n      detached: true,\n      stdio: \"ignore\",\n      env: {\n        APPIMAGE_SILENT_INSTALL: \"true\",\n      },\n    }\n\n    if (!isForceRunAfter) {\n      spawnOptions.env.APPIMAGE_EXIT_AFTER_INSTALL = \"true\"\n    }\n\n    let destination: string\n    if (path.basename(installerPath) === path.basename(appImageFile)) {\n      // no version in the file name, overwrite existing\n      destination = appImageFile\n    }\n    else {\n      destination = path.join(path.dirname(appImageFile), path.basename(installerPath))\n      spawnOptions.env.APPIMAGE_DELETE_OLD_FILE = appImageFile\n    }\n    move(installerPath, destination, {overwrite: true})\n      .then(() => chmod(destination, \"0755\"))\n      .then(() => {\n        try {\n          spawn(installerPath, args, spawnOptions)\n            .unref()\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      })\n      .catch(e => this.dispatchError(e))\n\n    return true\n  }\n}"]}
