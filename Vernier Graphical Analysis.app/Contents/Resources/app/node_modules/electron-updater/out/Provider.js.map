{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../src/Provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, HttpExecutor, safeStringifyJson, UpdateInfo, WindowsUpdateInfo } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { URL } from \"url\"\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\"\nimport { safeLoad } from \"js-yaml\"\n\nexport abstract class Provider<T extends UpdateInfo> {\n  protected requestHeaders: OutgoingHttpHeaders | null\n\n  constructor(protected readonly executor: HttpExecutor<any>) {\n  }\n\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\n    return null\n  }\n\n  setRequestHeaders(value: OutgoingHttpHeaders | null): void {\n    this.requestHeaders = value\n  }\n\n  abstract getLatestVersion(): Promise<T>\n\n  abstract resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo>\n\n  protected httpRequest(url: URL, headers: OutgoingHttpHeaders | null, cancellationToken: CancellationToken) {\n    return this.executor.request(this.createRequestOptions(url, headers), cancellationToken)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result: RequestOptions = {}\n    if (this.requestHeaders == null) {\n      if (headers != null) {\n        result.headers = headers\n      }\n    }\n    else {\n      result.headers = headers == null ? this.requestHeaders : {...this.requestHeaders, ...headers}\n    }\n\n    result.protocol = url.protocol\n    result.hostname = url.hostname\n    if (url.port) {\n      result.port = url.port\n    }\n    result.path = url.pathname + url.search\n    return result\n  }\n}\n\nexport function findFile(files: Array<ResolvedUpdateFileInfo>, extension: string, not?: Array<string>): ResolvedUpdateFileInfo | null | undefined  {\n  if (files.length === 0) {\n    throw new Error(\"No files provided\")\n  }\n\n  const result = files.find(it => it.url.pathname.toLowerCase().endsWith(`.${extension}`))\n  if (result != null) {\n    return result\n  }\n  else if (not == null) {\n    return files[0]\n  }\n  else {\n    return files.find(fileInfo => !not.some(ext => fileInfo.url.pathname.toLowerCase().endsWith(`.${ext}`)))\n  }\n}\n\nexport function parseUpdateInfo(rawData: string, channelFile: string, channelFileUrl: URL): UpdateInfo {\n  let result: UpdateInfo\n  try {\n    result = safeLoad(rawData)\n  }\n  catch (e) {\n    throw new Error(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}, rawData: ${rawData}`)\n  }\n  return result\n}\n\nexport function resolveFiles(updateInfo: UpdateInfo, baseUrl: URL, pathTransformer: (p: string) => string = p => p): Array<ResolvedUpdateFileInfo> {\n  let files = updateInfo.files\n  if (files == null || files.length === 0) {\n    if (updateInfo.path != null && updateInfo.sha512 != null) {\n      files = [\n        {\n          url: updateInfo.path,\n          sha512: updateInfo.sha512,\n        },\n      ]\n    }\n    else {\n      throw new Error(`No files provided: ${safeStringifyJson(updateInfo)}`)\n    }\n  }\n\n  const result: Array<ResolvedUpdateFileInfo> = files.map(fileInfo => {\n    if ((fileInfo as any).sha2 == null && fileInfo.sha512 == null) {\n      throw new Error(`Update info doesn't contain nor sha256 neither sha512 checksum: ${safeStringifyJson(fileInfo)}`)\n    }\n    return {\n      url: newUrlFromBase(pathTransformer(fileInfo.url), baseUrl),\n      info: fileInfo,\n    }\n  })\n\n  const packages = (updateInfo as WindowsUpdateInfo).packages\n  const packageInfo = packages == null ? null : (packages[process.arch] || packages.ia32)\n  if (packageInfo != null) {\n    (result[0] as any).packageInfo = {\n      ...packageInfo,\n      path: newUrlFromBase(pathTransformer(packageInfo.path), baseUrl).href,\n    }\n  }\n  return result\n}"]}
